[build-system]
requires = ["setuptools>=61.0", "wheel", "cython", "numpy"]
build-backend = "setuptools.build_meta"

[project]
name = "pylandstats"
version = "3.0.1"
description = "Computing landscape metrics in the Python ecosystem."
readme = "README.md"
authors = [
    { name = "MartÃ­ Bosch", email = "marti.bosch@epfl.ch" },
]
license = { text = "GPL-3.0" }
classifiers = [
    "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
    "Natural Language :: English",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
]
requires-python = ">=3.9"
dependencies = [
    "dask",
    "geopandas",
    "matplotlib >= 2.2",
    "numpy >= 1.15",
    "pandas >= 0.23",
    "rasterio >= 1.0.0",
    "scipy >= 1.0.0",
]

[project.urls]
Repository = "https://github.com/martibosch/pylandstats"

[project.optional-dependencies]
test = ["coverage[toml]", "pytest", "pytest-cov", "ruff"]
dev = ["build", "commitizen", "nox", "pre-commit", "pip", "toml", "twine"]
doc = ["m2r2", "pydata-sphinx-theme", "sphinx"]

# [tool.setuptools]
# ext-modules = [
#     {name="adjacency", sources=["pylandstats/adjacency.pyx"]}
# ]

[tool.setuptools.packages.find]
include = ["pylandstats", "pylandstats.*"]

[tool.ruff]
line-length = 88

[tool.ruff.format]
docstring-code-format = true

[tool.ruff.lint]
select = ["D", "E", "F", "I"]

[tool.ruff.lint.pydocstyle]
convention = "numpy"

[tool.ruff.lint.isort]
known-first-party = ["adjacency", "pylandstats"]

[tool.ruff.lint.per-file-ignores]
"**/__init__.py" = ["F403"]
"pylandstats/landscape.py" = ["D401"]  # for metric docstrings
"tests/test_pylandstats.py" = ["D"]

[tool.coverage.run]
source = ["pylandstats"]

[tool.coverage.report]
exclude_lines = [
    "if self.debug:",
    "pragma: no cover",
    "raise NotImplementedError",
    "except ModuleNotFoundError",
    "except ImportError",
]
ignore_errors = true
omit = ["tests/*", "docs/conf.py"]

[tool.commitizen]
name = "cz_conventional_commits"
tag_format = "v$version"
version_provider = "pep621"
version_files = [
    "pylandstats/__init__.py",
    "pyproject.toml:version"
]

[tool.cibuildwheel]
build = ["cp39-*", "cp310-*", "cp311-*", "cp312-*", "cp313-*"]
skip = "*-musllinux_i686"

[tool.codespell]
ignore-words-list = "te"
skip = "CHANGELOG.md"

[tool.tox]
envlist = [
    "lint",
    "py39",
    "py310",
    "py311",
    "py312",
    "py313",
]
isolated_build = true
requires = [
    "tox>=4.19",
]

[tool.tox.gh-actions.python]
"3.9" = [
    "py39",
]
"3.10" = [
    "py310",
]
"3.11" = [
    "py311",
]
"3.12" = [
    "py312",
]
"3.13" = [
    "lint",
    "py313",
]

[tool.tox.testenv]
commands = [
    "pytest -s --cov=pylandstats --cov-append --cov-report=xml --cov-report term-missing tests",
]
conda_deps = [
    "gdal>=3.3",
]
extras = [
    "test",
]
whitelist_externals = [
    "pytest",
]

[tool.tox.testenv.lint]
commands = [
    "python -m build",
    "sphinx-build docs docs/_build",
    "twine check dist/*",
]
extras = [
    "dev",
    "doc",
    "test",
]
whitelist_externals = [
    "build",
    "sphinx-build",
    "twine",
]

[tool.tox.testenv.setenv]
PYTHONPATH = "{toxinidir}"
PYTHONWARNINGS = "ignore"
